{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "siteName": {
            "type": "string",
            "metadata": {
                "description": "Name of azure web app"
            }
        },
        "administratorLogin": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Database administrator login name"
            }
        },
        "administratorLoginPassword": {
            "type": "securestring",
            "minLength": 8,
            "maxLength": 128,
            "metadata": {
                "description": "Database administrator password"
            }
        },
        "databaseSkucapacity": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Azure database for PostgreSQL vCores capacity"
            }
        },
        "databaseSkuName": {
            "type": "string",
            "defaultValue": "GP_Gen5_2",
            "metadata": {
                "description": "Azure database for PostgreSQL sku name : "
            }
        },
        "databaseSkuSizeMB": {
            "type": "int",
            "defaultValue": 51200,
            "metadata": {
                "description": "Azure database for PostgreSQL Sku Size "
            }
        },
        "databaseSkuTier": {
            "type": "string",
            "defaultValue": "GeneralPurpose",
            "metadata": {
                "description": "Azure database for PostgreSQL pricing tier"
            }
        },
        "postgresqlVersion": {
            "type": "string",
            "defaultValue": "11",
            "metadata": {
                "description": "PostgreSQL version"
            }
        },
        "cacheSKUName": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "The pricing tier of the new Azure Redis Cache."
            }
        },
        "cacheSKUFamily": {
            "type": "string",
            "defaultValue": "C",
            "metadata": {
                "description": "The family for the sku."
            }
        },
        "cacheSKUCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The size of the new Azure Redis Cache instance. "
            },
            "minValue": 0,
            "maxValue": 6
        },
        "clusterName": {
            "type": "string",
            "defaultValue": "inforiverakscluster",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 128,
            "maxValue": 1023,
            "minValue": 0,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            }
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 1,
            "maxValue": 2,
            "minValue": 1,
            "metadata": {
                "description": "The number of nodes for the cluster."
            }
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "databaseName": "[concat(parameters('siteName'), 'database')]",
        "serverName": "[concat(parameters('siteName'), 'pgserver')]",
        "hostingPlanName": "[concat(parameters('siteName'), 'serviceplan')]",
        "cacheName": "[concat(parameters('siteName'), 'cache')]",
        "dockerRegistryUrl": "https://turing.azurecr.io",
        "dockerRegistryUsername": "turing",
        "dockerRegistryPassword": "19Z6KSBv7eYHk6jrShqc2w5=4qkQPNN2"
    },
    "resources": [

        // AKS Cluster Deployment Configuration
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2020-09-01",
            "name": "[parameters('clusterName')]",
            "location": "[parameters('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "mode": "System",
                        "enableAutoScaling": true,
                        "minCount": 1,
                        "maxCount": 2
                    }
                ]
            }
        },

        // Redis Cache Server Configuration
        {
            "name": "[variables('cacheName')]",
            "type": "Microsoft.Cache/Redis",
            "location": "[parameters('location')]",
            "apiVersion": "2015-08-01",
            "properties": {
                "sku": {
                    "name": "[parameters('cacheSKUName')]",
                    "family": "[parameters('cacheSKUFamily')]",
                    "capacity": "[parameters('cacheSKUCapacity')]"
                }
            }
        },

        // Web APP Configurations
        {
            "type": "Microsoft.Web/sites",
            "name": "[parameters('siteName')]",
            "dependsOn": [
                "[variables('hostingPlanName')]"
            ],
            "properties": {
                "siteConfig": {
                    "linuxFxVersion": "DOCKER|turing.azurecr.io/turing-api:staging",
                    "alwaysOn": true,
                    "appSettings": [ // Application configurations
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[variables('dockerRegistryUrl')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                            "value": "[variables('dockerRegistryUsername')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": "[variables('dockerRegistryPassword')]"
                        },
                        {
                            "name": "ADMIN_PORTAL_URL",
                            "value": "[concat(parameters('siteName'), '.azurewebsite.net')]"
                        },
                        {
                            "name": "DB_HOST",
                            "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('serverName'))).fullyQualifiedDomainName]"
                        },
                        {
                            "name": "DB_PASS",
                            "value": "[parameters('administratorLoginPassword')]"
                        },
                        {
                            "name": "DB_USER",
                            "value": "[concat(parameters('administratorLogin'),'@',variables('serverName'))]"
                        },
                        {
                            "name": "REDIS_HOST",
                            "value": "[concat(variables('cacheName'),'.redis.cache.windows.net')]"
                        },
                        {
                            "name": "REDIS_PASSWORD",
                            "value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('cacheName')), '2020-12-01').primaryKey]"
                        },
                        {
                            "name": "BOOTSTRAP_ON_PREMISE",
                            "value": "true"
                        },
                        {
                            "name": "BOOTSTRAP_ON_PREMISE_WORKSPACE_NAME",
                            "value": ""
                        },
                        {
                            "name": "BOOTSTRAP_ON_PREMISE_WORKSPACE_ADMIN",
                            "value": ""
                        },
                        {
                            "name": "BOOTSTRAP_ON_PREMISE_WORKSPACE_LICENSE",
                            "value": ""
                        },
                        {
                            "name": "BOOTSTRAP_ON_PREMISE_WORKSPACE_DOMAIN",
                            "value": ""
                        }
                    ]
                },
                "name": "[parameters('siteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            },
            "apiVersion": "2019-08-01",
            "location": "[parameters('location')]"
        },

        // App Service Plan Configurations
        {
            "apiVersion": "2019-08-01",
            "name": "[variables('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "workerSizeId": "1",
                "reserved": true,
                "numberOfWorkers": "1"
            },
            "sku": {
                "Tier": "Standard",
                "Name": "S1"
            },
            "kind": "linux"
        },

        // Database Configuration File
        {
            "apiVersion": "2017-12-01",
            "location": "[parameters('location')]",
            "name": "[variables('serverName')]",
            "properties": {
                "createMode": "Default",
                "version": "[parameters('postgresqlVersion')]",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "storageMB": "[parameters('databaseSkuSizeMB')]"
            },
            "sku": {
                "name": "[parameters('databaseSkuName')]",
                "tier": "[parameters('databaseSkuTier')]",
                "capacity": "[parameters('databaseSkucapacity')]",
                "size": "[parameters('databaseSkuSizeMB')]",
                "family": "Gen5"
            },
            "type": "Microsoft.DBforPostgreSQL/servers",
            "resources": [
                {
                    "type": "firewallrules",
                    "apiVersion": "2017-12-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers/', variables('serverName'))]"
                    ],
                    "location": "[parameters('location')]",
                    "name": "[concat(variables('serverName'),'firewall')]",
                    "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "255.255.255.255"
                    }
                },
                {
                    "name": "[variables('databaseName')]",
                    "type": "databases",
                    "apiVersion": "2017-12-01",
                    "properties": {
                        "charset": "utf8",
                        "collation": "English_United States.1252"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers/', variables('serverName'))]"
                    ]
                }
            ]
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))).fqdn]"
        }
    }
}
